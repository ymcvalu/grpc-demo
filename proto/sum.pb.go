// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sum.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SumResp struct {
	Sum                  int64    `protobuf:"varint,1,opt,name=sum,proto3" json:"sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResp) Reset()         { *m = SumResp{} }
func (m *SumResp) String() string { return proto.CompactTextString(m) }
func (*SumResp) ProtoMessage()    {}
func (*SumResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_62743f9cdc99b9fd, []int{0}
}

func (m *SumResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResp.Unmarshal(m, b)
}
func (m *SumResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResp.Marshal(b, m, deterministic)
}
func (m *SumResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResp.Merge(m, src)
}
func (m *SumResp) XXX_Size() int {
	return xxx_messageInfo_SumResp.Size(m)
}
func (m *SumResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResp.DiscardUnknown(m)
}

var xxx_messageInfo_SumResp proto.InternalMessageInfo

func (m *SumResp) GetSum() int64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

type SumReq struct {
	A                    int64    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int64    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumReq) Reset()         { *m = SumReq{} }
func (m *SumReq) String() string { return proto.CompactTextString(m) }
func (*SumReq) ProtoMessage()    {}
func (*SumReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_62743f9cdc99b9fd, []int{1}
}

func (m *SumReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumReq.Unmarshal(m, b)
}
func (m *SumReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumReq.Marshal(b, m, deterministic)
}
func (m *SumReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumReq.Merge(m, src)
}
func (m *SumReq) XXX_Size() int {
	return xxx_messageInfo_SumReq.Size(m)
}
func (m *SumReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SumReq.DiscardUnknown(m)
}

var xxx_messageInfo_SumReq proto.InternalMessageInfo

func (m *SumReq) GetA() int64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *SumReq) GetB() int64 {
	if m != nil {
		return m.B
	}
	return 0
}

func init() {
	proto.RegisterType((*SumResp)(nil), "proto.SumResp")
	proto.RegisterType((*SumReq)(nil), "proto.SumReq")
}

func init() { proto.RegisterFile("sum.proto", fileDescriptor_62743f9cdc99b9fd) }

var fileDescriptor_62743f9cdc99b9fd = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0xcd, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xd2, 0x5c, 0xec, 0xc1, 0xa5, 0xb9,
	0x41, 0xa9, 0xc5, 0x05, 0x42, 0x02, 0x5c, 0xcc, 0xc5, 0xa5, 0xb9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0xcc, 0x41, 0x20, 0xa6, 0x92, 0x0a, 0x17, 0x1b, 0x58, 0xb2, 0x50, 0x88, 0x87, 0x8b, 0x31, 0x11,
	0x2a, 0xc3, 0x98, 0x08, 0xe2, 0x25, 0x49, 0x30, 0x41, 0x78, 0x49, 0x46, 0x86, 0x5c, 0xec, 0xce,
	0x89, 0x39, 0xc9, 0xc1, 0x65, 0xc9, 0x42, 0x6a, 0x5c, 0xcc, 0xc1, 0xa5, 0xb9, 0x42, 0xbc, 0x10,
	0x3b, 0xf4, 0x20, 0x9a, 0xa5, 0xf8, 0x90, 0xb9, 0xc5, 0x05, 0x4a, 0x0c, 0x4e, 0x06, 0x5c, 0xd2,
	0x99, 0xf9, 0x7a, 0xe9, 0x45, 0x05, 0xc9, 0x7a, 0xa9, 0x15, 0x89, 0xb9, 0x05, 0x39, 0xa9, 0xc5,
	0x7a, 0x19, 0xa9, 0x39, 0x39, 0xf9, 0xe5, 0xf9, 0x45, 0x39, 0x29, 0x4e, 0xfc, 0x1e, 0x20, 0x76,
	0x38, 0x88, 0x1d, 0x00, 0xd2, 0x19, 0xc0, 0x98, 0xc4, 0x06, 0x36, 0xc2, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xbd, 0xfd, 0x72, 0x12, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalcSvcClient is the client API for CalcSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalcSvcClient interface {
	// 每个rpc接口声明都必须有且一个参数和一个返回值
	Sum(ctx context.Context, in *SumReq, opts ...grpc.CallOption) (*SumResp, error)
}

type calcSvcClient struct {
	cc *grpc.ClientConn
}

func NewCalcSvcClient(cc *grpc.ClientConn) CalcSvcClient {
	return &calcSvcClient{cc}
}

func (c *calcSvcClient) Sum(ctx context.Context, in *SumReq, opts ...grpc.CallOption) (*SumResp, error) {
	out := new(SumResp)
	err := c.cc.Invoke(ctx, "/proto.CalcSvc/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcSvcServer is the server API for CalcSvc service.
type CalcSvcServer interface {
	// 每个rpc接口声明都必须有且一个参数和一个返回值
	Sum(context.Context, *SumReq) (*SumResp, error)
}

func RegisterCalcSvcServer(s *grpc.Server, srv CalcSvcServer) {
	s.RegisterService(&_CalcSvc_serviceDesc, srv)
}

func _CalcSvc_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcSvcServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalcSvc/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcSvcServer).Sum(ctx, req.(*SumReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalcSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CalcSvc",
	HandlerType: (*CalcSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CalcSvc_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sum.proto",
}
